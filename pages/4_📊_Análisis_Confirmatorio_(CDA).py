import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from funciones import load_data

sns.set_theme(style = 'dark', palette = 'deep')

st.set_page_config(
    page_title="An치lisis Confirmatorio",
    page_icon="游늵",
)

# CARGA DE DATOS #
dataset = 'data/processed_data.csv'

data = load_data(dataset)

st.title('An치lisis Confirmatorio')

st.write('En esta secci칩n se realizar치 un an치lisis confirmatorio de los datos obtenidos en la secci칩n anterior.')

st.write(data.head())

st.write("En el an치lisis exploratorio podemos observar tendencias en los datos, pero no podemos asegurar que estas tendencias sean significativas. Para ello, realizaremos un an치lisis confirmatorio de los datos. Por ejemplo, en el an치lisis exploratorio observamos que en la mayor칤a de los pa칤ses tienen una tendencia a disminuir su consumo de carne de ternera.")

st.write("Para comprobar si esta tendencia es significativa, realizaremos un an치lisis de regresi칩n lineal simple. Para ello, utilizaremos la librer칤a statsmodels.")

st.write("En primer lugar, realizaremos un an치lisis de regresi칩n lineal simple para el consumo de carne de ternera en Europa.")

data = data.loc[(data['TIME'] >= 1999) & (data['CODE'] <= 'EU27')]

st.write(data.head())

st.write("En este caso, la variable dependiente ser치 el consumo de carne de ternera y la variable independiente ser치 el a침o.")

st.write("Para realizar el an치lisis de regresi칩n lineal simple, utilizaremos la funci칩n OLS de la librer칤a statsmodels.")

st.write("En primer lugar, separamos la variable dependiente de la variable independiente.")

X = data['TIME']
y = data['KG_CAP']

st.write()

st.write("Luego, separamos los datos en datos de entrenamiento y datos de prueba.")

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8)

st.write("Luego, se realiza el an치lisis de regresi칩n lineal simple.")

import statsmodels.api as sm

X_train = sm.add_constant(X_train)

model = sm.OLS(y_train, X_train).fit()

st.write(model.summary())

st.write("En este caso, el valor de R-squared es 0.000, lo que indica que el modelo no explica la variabilidad de los datos.")

st.write("Para comprobar si el modelo es significativo, se realiza un an치lisis de varianza (ANOVA).")

import statsmodels.stats.api as sms

st.write(sms.anova_lm(model))

st.write("En este caso, el valor de p-value es 0.000, lo que indica que el modelo es significativo.")

st.write("Para comprobar si el modelo es adecuado, se realiza un an치lisis de residuos.")

st.write("En primer lugar, se obtienen los residuos del modelo.")

residuals = model.resid

st.write("Luego, se realiza un an치lisis de residuos.")

from statsmodels.graphics.gofplots import qqplot

fig, ax = plt.subplots(figsize = (10, 6))

qqplot(residuals, line = 's', ax = ax)

st.pyplot(fig)

st.write("En este caso, los residuos no siguen una distribuci칩n normal.")

st.write("Para comprobar si el modelo es adecuado, se realiza un an치lisis de homocedasticidad.")

from statsmodels.stats.diagnostic import het_breuschpagan

st.write(het_breuschpagan(residuals, X_train))




st.write(data.columns, data.dtypes)
st.write(data.describe())