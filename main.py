# LIBRER칈AS #
import streamlit as st 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import plotly_express as px
import plotly.graph_objects as go


# CONFIGURACI칍N DE LA P츼GINA #
#layout="centered" or "wide"
st.set_page_config(page_title="Consumo de Carne", layout="wide", page_icon="游볼")
st.set_option('deprecation.showPyplotGlobalUse', False)

# P츼GINA PRINCIPAL#
st.title('Consumo de carne en el mundo')
st.markdown("""
* **Objetivo:** Analizar el consumo de carne en el mundo.
* **Fuente:** [Our World in Data](https://ourworldindata.org/meat-production)
""")
st.image('img/carne.jpg')
st.text('Imagen de https://www.agronewscomunitatvalenciana.com/')

st.markdown("""
El consumo de carne es uno de los aspectos m치s importantes de la alimentaci칩n humana y una fuente clave de prote칤nas y otros nutrientes. Sin embargo, el consumo de carne a nivel mundial ha sido objeto de un intenso debate en los 칰ltimos a침os debido a su impacto ambiental y a los posibles riesgos para la salud.

En este contexto, el an치lisis de consumo de carne a nivel mundial es una herramienta valiosa para comprender los patrones de consumo de carne y sus implicaciones en t칠rminos de salud y sostenibilidad. El an치lisis de datos de consumo de carne a nivel mundial tambi칠n puede proporcionar informaci칩n sobre las tendencias de consumo y los factores que influyen en la elecci칩n de alimentos en diferentes pa칤ses.

A trav칠s del an치lisis de datos, es posible identificar patrones de consumo de carne en diferentes regiones del mundo, examinar las preferencias de consumo de diferentes tipos de carne y evaluar las implicaciones del consumo de carne para la salud y el medio ambiente. Tambi칠n se puede analizar c칩mo el consumo de carne var칤a seg칰n el nivel de ingresos de los pa칤ses, la cultura alimentaria y los factores socioecon칩micos.

En definitiva, el an치lisis de consumo de carne a nivel mundial puede proporcionar informaci칩n valiosa para los responsables de la formulaci칩n de pol칤ticas, los investigadores y los consumidores interesados en tomar decisiones informadas sobre su alimentaci칩n y su impacto en el medio ambiente.
""")
st.markdown("""
* **Autor:** [Elisabeth P칠rez](https://www.linkedin.com/in/elisabethperezruiz)
""")
st.markdown("""
* **Fecha:** 02/05/2023
""")
st.markdown("""
* **C칩digo:** [GitHub](https://github.com/ElisabethDATA/informe-carne)
""")
st.markdown("""
* **Datos:** [GitHub](https://raw.githubusercontent.com/ElisabethDATA/informe-carne/master/data/meat_consumption.csv)
""")
st.markdown("""
* **Licencia:** [Creative Commons Attribution 4.0 International](https://creativecommons.org/licenses/by/4.0/)
""")

# COSAS QUE VAMOS A USAR EN TODA LA APP #

# CARGA DE DATOS #
@st.cache_data
def load_data(nrows):
    df = pd.read_csv('data/meat_consumption.csv', nrows=nrows)
    df.columns = [column.upper() for column in df.columns]
    return df

df = load_data(10000)

def select_location(location):
    df_location = df[df['LOCATION'] == location]
    return df_location

def select_year(year):
    df_year = df[df['TIME'] == year]
    return df_year


# VISUALIZACI칍N #
st.title('Visualizaci칩n')
st.markdown("""
En esta secci칩n se muestran las visualizaciones de los datos.
""")

# SIDEBAR #
st.sidebar.title('Men칰')
st.sidebar.markdown("""
* **Visualizaci칩n:** Selecciona el tipo de visualizaci칩n que deseas ver.
* **Filtrar por:** Selecciona el tipo de carne que deseas ver.
* **Filtrar por a침o:** Selecciona el a침o que deseas ver.
""")
st.sidebar.markdown("""
* **Nota:** El consumo de carne se mide en kilogramos por persona al a침o.
""")

# SIDEBAR: FILTRO POR TIPO DE CARNE #
st.sidebar.subheader('Filtrar por')
tipos = {'Carne de ternera': 'BEEF', 'Carne de cerdo': 'PIG', 'Carne de pollo (aves)': 'POULTRY', 'Carne de oveja': 'SHEEP'}
select = st.sidebar.selectbox('Tipo de carne', ['Carne de ternera', 'Carne de cerdo', 'Carne de pollo (aves)', 'Carne de oveja'])
df_select = df[df['SUBJECT'] == tipos[select]]


# SIDEBAR: FILTRO POR A칌O #
st.sidebar.subheader('Filtrar por a침o')
year_to_filter = st.sidebar.slider('A침o', 1961, 2018, 2018)
df_year = select_year(year_to_filter)

# Crear un texto para que el usuario sepa que el dataset est치 cargando.
data_load_state = st.text('Loading data...')
# Load 10,000 rows of data into the dataframe.
data = load_data(10000)
# Notify the reader that the data was successfully loaded.
data_load_state.text("Done! (using st.cache_data)")


# SIDEBAR: VISUALIZACI칍N #
if st.checkbox('Show raw data'):
    st.subheader('Raw data')
    st.write(data)
